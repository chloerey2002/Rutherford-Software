#In the above code, we use the RPi.GPIO library to configure the GPIO pin connected to the button. The button is assumed to be connected to GPIO pin 17 (you can change it to the appropriate pin number). We set up the pin as an input with a pull-up resistor using GPIO.setup().

The button_callback() function is defined to handle the button press event. It checks the state of the button using GPIO.input() and prints the corresponding output value.

We add an event listener using GPIO.add_event_detect() to detect both rising and falling edges of the button state changes. When a button press or release is detected, the button_callback() function is called.

Finally, we enter a main loop that waits for KeyboardInterrupt (Ctrl+C) to gracefully exit the program. When the program exits, we clean up the GPIO using GPIO.cleanup().

When you run this code and press the button, it will output "Button pressed - Output: 1". When the button is released, it will output "Button released - Output: 0".


import RPi.GPIO as GPIO

# Configure GPIO pin for the button
BUTTON_PIN = 17
GPIO.setmode(GPIO.BCM)
GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Function to handle button press
def button_callback(channel):
    if GPIO.input(BUTTON_PIN) == GPIO.LOW:
        print("Button pressed - Output: 1")
    else:
        print("Button released - Output: 0")

# Add event listener for button press
GPIO.add_event_detect(BUTTON_PIN, GPIO.BOTH, callback=button_callback, bouncetime=200)

# Main loop
try:
    while True:
        pass

except KeyboardInterrupt:
    print("Exiting...")
    GPIO.cleanup()
